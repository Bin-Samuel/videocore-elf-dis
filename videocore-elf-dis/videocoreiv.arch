# Arch Instruction bits file for VideoCore IV
# NOTE: This is in a very early state and is of limited accuracy.
# Mnemonics wont match official VideoCore IV due to this being an independent work.
#
# History:
# Date          Author           Comment
# 16/07/2012    hhh              Initial check in, the 32 bit long instructions are in a state of flux - dont trust :)
#
# This is a bitstream specification for the arch tool chain.
#
# This format is due to change soon so don't rely on it too much, in particular:
#
#   Left hand side will support <name>:<length> notation like s:4
#   Right hand side will switch to a symbolic focus. 

# Format Explanation:
# 
# A file consists of many lines of:
#   <bit-match> {<quoted-string>}  {<callback>}
# 
# <callback>  ::= {function in DefProcessor_IV class, with parameters}
# 
# <bit-match> ::= {<digit>|<letter>}
#
# In this particular arch file we have:
# 
#   0 1 x ? !    match a zero, one, any, any but warn if zero, any but warn if != one
#   a b d s      bits for a register reference
#   c            bits for condition codes
#   i            signed integer immediate
#   o            signed offset
#   @            PC-relative branch, based on 'o'; allows for possible symbol relocation, may be replaced with "0x%08x{$+o*2}" if no symbol found.
#   u            unsigned integer immediate
#   m            mask
#   p q          operation
#   x            uknown
#
#  In general a bit-match (or left-hand-side) is bound against the incoming bitstream.
#  The quoted-string (or right-hand-sides) are emitted with the bound items resolved.

# Signed Quantities
#   i Signed immediate
#   o Signed offset
(define-signed i)
(define-signed o)

# Instruction Encodings
#   16 bit: short0
#   32 bit: short0 short1
#   48 bit: short0 short2 short1

# Condition Code 
(define-table c ["eq", "ne", "cs/lo", "cc/hs", "mi", "pl", "vs", "vc", "hi", "ls", "ge", "lt", "gt", "le", "", "f"])

# Common Operations
(define-table q ["mov", "add", "mul", "sub", "mvn", "cmp", "btst", "extu", "bset", "bclr", "bchg", "adds8", "exts", "lsr", "lsl", "asr"])

# All operations
(define-table p ["mov", "cmn", "add", "bic", "mul", "eor", "sub", "and", "mvn", "ror", "cmp", "rsb", "btst", "or", "extu", "max", "bset", "min", "bclr", "adds2", "bchg", "adds4", "adds8", "adds16", "exts", "neg", "lsr", "clz", "lsl", "brev", "asr", "abs"])

# Floating point
(define-table f ["fadd", "fsub", "fmul", "fdiv", "fcmp", "fabs", "frsb", "fmax", "frcp", "frsqrt", "fnmul", "fmin", "fld1", "fld0", "fop14", "fop15"])

# Width of Memory Operation   
#   00 Long/Word  (32 bits)
#   01 Half Word  (16 bits)
#   10 Byte       (8 bits)
#   11 Signed Half (16 bits)
(define-table w ["", "h", "b", "sh"])

# Vector ops (???)
# ld = 1C
(define-table v ["U00", "U01", "U02", "U03", "U04", "U05", "U06", "U07", "U08", "U09", "U0A", "U0B", "U0C", "U0D", "U0E", "U0F", "U10", "U11", "U12", "U13", "U14", "U15", "U16", "U17", "U18", "U19", "U1A", "U1B", "U1C", "U1D", "U1E", "U1F", "U20", "U21", "U22", "U23", "U24", "U25", "U26", "U27", "U28", "U29", "U2A", "U2B", "U2C", "U2D", "U2E", "U2F", "U30", "U31", "U32", "U33", "U34", "U35", "U36", "U37", "U38", "U39", "U3A", "U3B", "U3C", "U3D", "U3E", "U3F"])

#
# 16 bit instructions
#

0000 0000 0000 0000                                               "halt?"

0000 0000 0000 0001                                               "nop"

0000 0000 0000 001x                                               "unk1 0x%02x{x}"
0000 0000 0000 01xx                                               "unk2 0x%02x{x}"
0000 0000 0000 1010                                               "rti"      # pops sr and pc off stack
0000 0000 0000 1xxx                                               "unk3 0x%02x{x}"
0000 0000 0001 xxxx                                               "unk4 0x%02x{x}"
0000 0000 001x xxxx                                               "unk5 0x%02x{x}"

0000 0000 0101 1010                                               "rts"     #otherwise known as 'b lr'
0000 0000 010d dddd                                               "b r%i{d}"
0000 0000 011d dddd                                               "bl r%i{d}"

# Table/Switch instructions
# branch using indirect byte displacement  b *(pc+rd)
0000 0000 100d dddd                                               "tbb r%i{d}" #, [0x%x{2+$+f*2}, 0x%x{2+$+e*2}, 0x%x{2+$+b*2}, 0x%x{2+$+a*2}, ...]
# branch using indirect short displacement b *(pc+rd*2)
0000 0000 101d dddd                                               "tbh r%i{d}" #, [0x%x{2+$+b*2}, 0x%x{2+$+a*2}, ...]

0000 0000 111d dddd                                               "mov r%i{d}, cpuid"
0000 0000 1xxx xxxx                                               "unk7 0x%02x{x}"
0000 0001 xxxx xxxx                                               "unk8 0x%02x{x}"

# Push/Pop bits for single register case
0000 0010 1010 0000                                               "push r6"
0000 0010 0010 0000                                               "pop  r6"
0000 0011 1010 0000                                               "push r6, lr"
0000 0011 0010 0000                                               "pop  r6, pc"
0000 0010 1bb0 0000                                               "push r%d{b*8}"
0000 0010 0bb0 0000                                               "pop  r%d{b*8}"
0000 0011 1bb0 0000                                               "push r%d{b*8}, lr"
0000 0011 0bb0 0000                                               "pop  r%d{b*8}, pc"

# Push/Pop bits multiple register case for bank 1
0000 0010 101n nnnn                                               "push r6-r%d{6+n}"
0000 0010 001n nnnn                                               "pop  r6-r%d{6+n}"
0000 0011 101n nnnn                                               "push r6-r%d{6+n}, lr"
0000 0011 001n nnnn                                               "pop  r6-r%d{6+n}, pc"

# Push/Pop bits general case
0000 0010 1bbn nnnn                                               "push r%d{b*8}-r%d{(n+b*8)&31}"
0000 0010 0bbn nnnn                                               "pop  r%d{b*8}-r%d{(n+b*8)&31}"
0000 0011 1bbn nnnn                                               "push r%d{b*8}-r%d{(n+b*8)&31}, lr"
0000 0011 0bbn nnnn                                               "pop  r%d{b*8}-r%d{(n+b*8)&31}, pc"

0000 010o oooo dddd                                               "ld r%i{d}, 0x%02x{o*4}(sp)"
0000 011o oooo dddd                                               "st r%i{d}, 0x%02x{o*4}(sp)"

0000 1ww0 ssss dddd                                               "ld%s{w} r%i{d}, (r%i{s})"
0000 1ww1 ssss dddd                                               "st%s{w} r%i{d}, (r%i{s})"
 
0001 0ooo ooo1 1001                                               "add sp, #0x%x{o*4}"
0001 0ooo oood dddd                                               "lea r%i{d}, 0x%x{o*4}(sp)"
 
0001 1ccc cooo oooo                                               "b%s{c} @"                                                "BRCHREL({$+o*2})"

0010 uuuu ssss dddd                                               "ld  r%i{d}, 0x%02x{u*4}(r%i{s})"
0011 uuuu ssss dddd                                               "st  r%i{d}, 0x%02x{u*4}(r%i{s})"

# Arithmetic and Logical Operations

# op rd, ra   (rd = rd op ra)
010p pppp ssss dddd                                               "%s{p} r%i{d}, r%i{s}"
0101 0xxs ssss dddd                                               "add r%i{d}, r%i{s} shl #%i{x}"

# op rd, #u   (rd = rd op #u)
011q qqqu uuuu dddd                                               "%s{q} r%i{d}, #%i{u}"

#
# 32 bit instructions
#

1000 cccc 0000 dddd 01ss ssoo oooo oooo                           "b%s{c} r%i{d}, r%i{s}, @"                                "BRCHREL({$+o*2})"
1000 cccc 0000 dddd 11uu uuuu oooo oooo                           "b%s{c} r%i{d}, #%i{u}, @"                                "BRCHREL({$+o*2})"

1000 cccc aaaa dddd 00ss ssoo oooo oooo                           "addcmpb%s{c} r%i{d}, r%i{a}, r%i{s}, @"                  "BRCHREL({$+o*2})"
1000 cccc iiii dddd 01ss ssoo oooo oooo                           "addcmpb%s{c} r%i{d}, #%i{i}, r%i{s}, @"                  "BRCHREL({$+o*2})"
1000 cccc aaaa dddd 10uu uuuu oooo oooo                           "addcmpb%s{c} r%i{d}, r%i{a}, #%i{u}, @"                  "BRCHREL({$+o*2})"
1000 cccc iiii dddd 11uu uuuu oooo oooo                           "addcmpb%s{c} r%i{d}, #%i{i}, #%i{u}, @"                  "BRCHREL({$+o*2})"

1001 cccc 0ooo oooo oooo oooo oooo oooo                           "b%s{c} @"                                                "BRCHREL({$+o*2})"
1001 oooo 1ooo oooo oooo oooo oooo oooo                           "bl  @"                                                   "BRCHREL({$+o*2})"

# Conditional Ld/St with (ra, rb)
1010 0000 ww0d dddd aaaa accc c00b bbbb                           "ld%s{w}%s{c} r%i{d}, (r%i{a}, r%i{b})"
1010 0000 ww1d dddd aaaa accc c00b bbbb                           "st%s{w}%s{c} r%i{d}, (r%i{a}, r%i{b})"
1010 0000 ww0d dddd aaaa accc c10u uuuu                           "ld%s{w}%s{c} r%i{d}, 0x%x{u}(r%i{a})"
1010 0000 ww1d dddd aaaa accc c10u uuuu                           "st%s{w}%s{c} r%i{d}, 0x%x{u}(r%i{a})"
1010 0000 wwxd dddd aaaa accc cxxu uuuu                           "; bad ld/st with (ra, rb) or (ra, #u)"

# Conditional Ld/St with Post increment/decrement
1010 0100 ww0d dddd ssss sccc c000 0000                           "ld%s{w}%s{c} r%i{d}, --(r%i{s})"
1010 0100 ww1d dddd ssss sccc c000 0000                           "st%s{w}%s{c} r%i{d}, --(r%i{s})" 
1010 0101 ww0d dddd ssss sccc c000 0000                           "ld%s{w}%s{c} r%i{d}, (r%i{s})++"
1010 0101 ww1d dddd ssss sccc c000 0000                           "st%s{w}%s{c} r%i{d}, (r%i{s})++" 
1010 010x wwxd dddd ssss sccc cxxx xxxx                           "; bad ld/st with pre-decrement/post-increment addressing";

# Non conditional
1010 001o ww0d dddd ssss sooo oooo oooo                           "ld%s{w} r%i{d}, 0x%x{o}(r%i{s})"
1010 001o ww1d dddd ssss sooo oooo oooo                           "st%s{w} r%i{d}, 0x%x{o}(r%i{s})"

1010 0x1o ww0d dddd ssss sooo oooo oooo                           "ld%s{w} r%i{d}, 0x%x{o}(r%i{s}) x=%d{x}?"
1010 0x1o ww1d dddd ssss sooo oooo oooo                           "st%s{w} r%i{d}, 0x%x{o}(r%i{s}) x=%d{x}?"

# 1010 10.. Ld/st with 16 bit offset
1010 1000 ww0d dddd oooo oooo oooo oooo                           "ld%s{w} r%i{d}, 0x%0x{o}(r24)"
1010 1000 ww1d dddd oooo oooo oooo oooo                           "st%s{w} r%i{d}, 0x%0x{o}(r24)"
1010 1001 ww0d dddd oooo oooo oooo oooo                           "ld%s{w} r%i{d}, 0x%0x{o}(sp)"
1010 1001 ww1d dddd oooo oooo oooo oooo                           "st%s{w} r%i{d}, 0x%0x{o}(sp)"
1010 1010 ww0d dddd oooo oooo oooo oooo                           "ld%s{w} r%i{d}, 0x%0x{o}(pc)"
1010 1010 ww1d dddd oooo oooo oooo oooo                           "st%s{w} r%i{d}, 0x%0x{o}(pc)"
1010 1011 ww0d dddd oooo oooo oooo oooo                           "ld%s{w} r%i{d}, 0x%x{o}(r0)"
1010 1011 ww1d dddd oooo oooo oooo oooo                           "st%s{w} r%i{d}, 0x%x{o}(r0)"

1010 11xx ww0d dddd oooo oooo oooo oooo                           "ld%s{w} r%i{d}, 0x%x{o}(?? %i{x})"
1010 11xx ww1d dddd oooo oooo oooo oooo                           "st%s{w} r%i{d}, 0x%x{o}(?? %i{x})"

1100 0100 000d dddd aaaa accc c00b bbbb                           "mulhd.ss %s{c} r%i{d}, r%i{a}, r%i{b}"
1100 0100 001d dddd aaaa accc c00b bbbb                           "mulhd.su %s{c} r%i{d}, r%i{a}, r%i{b}"
1100 0100 010d dddd aaaa accc c00b bbbb                           "mulhd.us %s{c} r%i{d}, r%i{a}, r%i{b}"
1100 0100 011d dddd aaaa accc c00b bbbb                           "mulhd.uu %s{c} r%i{d}, r%i{a}, r%i{b}"
1100 0100 000d dddd aaaa accc c10u uuuu                           "mulhd.ss %s{c} r%i{d}, r%i{a}, #%d{u}"
1100 0100 001d dddd aaaa accc c10u uuuu                           "mulhd.su %s{c} r%i{d}, r%i{a}, #%d{u}"
1100 0100 010d dddd aaaa accc c10u uuuu                           "mulhd.us %s{c} r%i{d}, r%i{a}, #%d{u}"
1100 0100 011d dddd aaaa accc c10u uuuu                           "mulhd.uu %s{c} r%i{d}, r%i{a}, #%d{u}"

1100 0100 100d dddd aaaa accc c00b bbbb                           "divs%s{c} r%i{d}, r%i{a}, r%i{b}"
1100 0100 101d dddd aaaa accc c00b bbbb                           "divsu%s{c} r%i{d}, r%i{a}, r%i{b}"
1100 0100 110d dddd aaaa accc c00b bbbb                           "divus%s{c} r%i{d}, r%i{a}, r%i{b}"
1100 0100 111d dddd aaaa accc c00b bbbb                           "divu%s{c} r%i{d}, r%i{a}, r%i{b}"
1100 0100 100d dddd aaaa accc c10u uuuu                           "divs%s{c} r%i{d}, r%i{a}, #%d{u}"
1100 0100 101d dddd aaaa accc c10u uuuu                           "divsu%s{c} r%i{d}, r%i{a}, #%d{u}"
1100 0100 110d dddd aaaa accc c10u uuuu                           "divus%s{c} r%i{d}, r%i{a}, #%d{u}"
1100 0100 111d dddd aaaa accc c10u uuuu                           "divu%s{c} r%i{d}, r%i{a}, #%d{u}"

1100 0101 111d dddd aaaa accc c00b bbbb                           "add%s{c} r%d{d}, r%d{a}, r%d{b} shl 8"

1100 0101 xxxd dddd aaaa accc c00b bbbb                           "; TEST5 add%s{c} r%i{d}, r%i{a}, r%i{b} shl %d{x+1}"
1100 0101 xxxd dddd aaaa accc c10u uuuu                           "; TEST5 add%s{c} r%i{d}, r%i{a}, #%d{u} shl %d{x+1}"

1100 0110 xxxd dddd aaaa accc c00b bbbb                           "; TEST6 add%s{c} r%i{d}, r%i{a}, r%i{b} lsr %d{x+1}"
1100 0110 xxxd dddd aaaa accc c10u uuuu                           "; TEST6 add%s{c} r%i{d}, r%i{a}, #%d{u} lsr %d{x+1}"

1100 0110 xxxd dddd aaaa accc c00b bbbb                           "; TEST6 s%s{c} r%i{d}, r%i{a}, r%i{b} ;%d{x}"
1100 0110 xxxd dddd aaaa accc c00b bbbb                           "; TEST6 u%s{c} r%i{d}, r%i{a}, r%i{b} ;%d{x}"
1100 0110 xxxd dddd aaaa accc c10u uuuu                           "; TEST6 s%s{c} r%i{d}, r%i{a}, #%d{u} ;%d{x}"
1100 0110 xxxd dddd aaaa accc c10u uuuu                           "; TEST6 u%s{c} r%i{d}, r%i{a}, #%d{u} ;%d{x}"

1100 0111 xxxd dddd aaaa accc c00b bbbb                           "; TEST7 s%s{c} r%i{d}, r%i{a}, r%i{b} ;%d{x}"
1100 0111 xxxd dddd aaaa accc c00b bbbb                           "; TEST7 u%s{c} r%i{d}, r%i{a}, r%i{b} ;%d{x}"
1100 0111 xxxd dddd aaaa accc c10u uuuu                           "; TEST7 s%s{c} r%i{d}, r%i{a}, #%d{u} ;%d{x}"
1100 0111 xxxd dddd aaaa accc c10u uuuu                           "; TEST7 u%s{c} r%i{d}, r%i{a}, #%d{u} ;%d{x}"

# 32 bit triadic instructions
1100 00pp pppd dddd aaaa accc c00b bbbb                           "%s{p}%s{c} r%i{d}, r%i{a}, r%i{b}"
1100 00pp pppd dddd aaaa accc c1ii iiii                           "%s{p}%s{c} r%i{d}, r%i{a}, #%i{i}"

# floating poing triadic
1100 100f fffd dddd aaaa accc c00b bbbb                           "%s{f}%s{c} r%i{d}, r%i{a}, r%i{b}"
1100 100f fffd dddd aaaa accc c1ii iiii                           "%s{f}%s{c} r%i{d}, r%i{a}, #%i{i}"
1100 1010 000d dddd aaaa accc c100 0000                           "ftrunc r%i{d}, r%i{a} ; convert to int"
1100 1010 001d dddd aaaa accc c100 0000                           "floor r%i{d}, r%i{a} ; convert to int"
1100 1010 010d dddd aaaa accc c100 0000                           "flts r%i{d}, r%i{a} ; convert to float from signed integer"
1100 1010 011d dddd aaaa accc c100 0000                           "fltu r%i{d}, r%i{a} ; convert to float from unsigned integer"

1100 1010 000d dddd aaaa accc c1ii iiii                           "ftrunc r%i{d}, r%i{a}, #%i{i} ; unexpected const"
1100 1010 001d dddd aaaa accc c1ii iiii                           "floor r%i{d}, r%i{a}, #%i{i} ; unexpected const"
1100 1010 010d dddd aaaa accc c1ii iiii                           "flts r%i{d}, r%i{a}, #%i{i} ; unexpected const"
1100 1010 011d dddd aaaa accc c1ii iiii                           "fltu r%i{d}, r%i{a}, #%i{i} ; unexpected const"

1100 1100 001d dddd 0000 0000 000a aaaa                           "; TEST3 mov r%d{d}, reg%d{a}"
1100 1100 000a aaaa 0000 0000 000d dddd                           "; TEST3 mov reg%d{a}, r%d{d}"
1100 1100 xxxa aaaa 0000 0000 000d dddd                           "; TEST3 mov r%d{d}, reg%d{a} %x{x}?"

1011 00pp pppd dddd iiii iiii iiii iiii                           "%s{p} r%i{d}, #0x%04x{i}"

1011 01ss sssd dddd iiii iiii iiii iiii                           "lea r%i{d}, 0x%04x{i}(r%i{s})"
1011 1111 111d dddd oooo oooo oooo oooo                           "lea r%i{d}, 0x%08x{$+o} ;pc"

#
# 48 bit instruction words
#

1110 0000 ssss dddd uuuu uuuu uuuu uuuu uuuu uuuu uuuu uuuu       "; op0"
1110 0001 ssss dddd uuuu uuuu uuuu uuuu uuuu uuuu uuuu uuuu       "; op1"
1110 0010 ssss dddd uuuu uuuu uuuu uuuu uuuu uuuu uuuu uuuu       "; op2"
1110 0011 ssss dddd uuuu uuuu uuuu uuuu uuuu uuuu uuuu uuuu       "; op3"
1110 0100 ssss dddd uuuu uuuu uuuu uuuu uuuu uuuu uuuu uuuu       "; op4"

1110 0101 000d dddd oooo oooo oooo oooo oooo oooo oooo oooo       "lea r%i{d}, 0x%08x{$+o} ;(pc)"
1110 0101 xxxd dddd oooo oooo oooo oooo oooo oooo oooo oooo       "lea r%i{d}, 0x%08x{$+o} ;(pc) ; %x{x}?"     

1110 0110 ww0d dddd ssss sooo oooo oooo oooo oooo oooo oooo       "ld%s{w} r%i{d}, 0x%08x{o}(r%i{s})"
1110 0110 ww1d dddd ssss sooo oooo oooo oooo oooo oooo oooo       "st%s{w} r%i{d}, 0x%08x{o}(r%i{s})"

1110 0111 ww0d dddd 1111 1ooo oooo oooo oooo oooo oooo oooo       "ld%s{w} r%i{d}, 0x%08x{$+o} ;(pc)"
1110 0111 ww1d dddd 1111 1ooo oooo oooo oooo oooo oooo oooo       "st%s{w} r%i{d}, 0x%08x{$+o} ;(pc)"
1110 0111 ww0d dddd ssss sooo oooo oooo oooo oooo oooo oooo       "ld%s{w} r%i{d}, 0x%08x{o}(r%i{s})"
1110 0111 ww1d dddd ssss sooo oooo oooo oooo oooo oooo oooo       "st%s{w} r%i{d}, 0x%08x{o}(r%i{s})"

1110 10pp pppd dddd uuuu uuuu uuuu uuuu uuuu uuuu uuuu uuuu       "%s{p} r%i{d}, #0x%08x{u}"

1110 11ss sssd dddd uuuu uuuu uuuu uuuu uuuu uuuu uuuu uuuu       "add r%i{d}, r%i{s}, #0x%08x{u}"


#
# Experimental Vector Instruction Decoding
#
#00037e24: 1111000000000000: ... :f000 0ff8 0385 ; vector48 0x0, 0x3850ff8

# 48-bit vector insns: 1111 0xxx ...
# Work in progress!!
# Some things may be incorrect, particularly the vertical vs horizontal flag for each register arg.

#Load/store
1111 00uu 0uu0 00uu uuuu uuuu uuuu usss uxxu dddd dduu uuuu     "; Vld H(%d{d}, %d{(x<<4)}), (r%i{s})"
1111 00uu 0uu1 00uu uuuu uuuu uuuu usss uxxu dddd dduu uuuu     "; Vld H(%d{d}, %d{(x<<4)}), (r%i{s})++"
1111 00uu 1uu0 00dd dddd uuuu uuuu usss uuuu uuuu uuxx uuuu     "; Vst H(%d{d}, %d{(x<<4)}), (r%i{s})"
1111 00uu 1uu1 00dd dddd uuuu uuuu usss uuuu uuuu uuxx uuuu     "; Vst H(%d{d}, %d{(x<<4)}), (r%i{s})++"

1111 00uu 0uu0 01uu uuuu uuuu uuuu usss uyyu dddd dduu uuuu     "; Vld V(%d{(y<<4)}, %d{d}), (r%i{s})"
1111 00uu 0uu1 01uu uuuu uuuu uuuu usss uyyu dddd dduu uuuu     "; Vld V(%d{(y<<4)}, %d{d}), (r%i{s})++"
1111 00uu 1uu0 01dd dddd uuuu uuuu usss uuuu uuuu uuyy uuuu     "; Vst V(%d{(y<<4)}, %d{d}), (r%i{s})"
1111 00uu 1uu1 01dd dddd uuuu uuuu usss uuuu uuuu uuyy uuuu     "; Vst V(%d{(y<<4)}, %d{d}), (r%i{s})++"

1111 00uu 0uu0 10uu uuuu uuuu uuuu usss uxxu dddd dduu uuuu     "; Vld HX(%d{d}, %d{(x<<4)}), (r%i{s})"
1111 00uu 0uu1 10uu uuuu uuuu uuuu usss uxxu dddd dduu uuuu     "; Vld HX(%d{d}, %d{(x<<4)}), (r%i{s})++"
1111 00uu 1uu0 10dd dddd uuuu uuuu usss uuuu uuuu uuxx uuuu     "; Vst HX(%d{d}, %d{(x<<4)}), (r%i{s})"
1111 00uu 1uu1 10dd dddd uuuu uuuu usss uuuu uuuu uuxx uuuu     "; Vst HX(%d{d}, %d{(x<<4)}), (r%i{s})++"

1111 00uu 0uu0 11uu uuuu uuuu uuuu usss uyyu dddd dduu uuuu     "; Vld VX(%d{(y<<4)}, %d{d}), (r%i{s})"
1111 00uu 0uu1 11uu uuuu uuuu uuuu usss uyyu dddd dduu uuuu     "; Vld VX(%d{(y<<4)}, %d{d}), (r%i{s})++"
1111 00uu 1uu0 11dd dddd uuuu uuuu usss uuuu uuuu uuyy uuuu     "; Vst VX(%d{(y<<4)}, %d{d}), (r%i{s})"
1111 00uu 1uu1 11dd dddd uuuu uuuu usss uuuu uuuu uuyy uuuu     "; Vst VX(%d{(y<<4)}, %d{d}), (r%i{s})++"

#Vector data ops
#TODO - Vertical flag for A argument?? B as register?
1111 01vv vvvv 00aa aaaa u0uu uuuu usss uxxu dddd ddbb uuuu     "; V%s{v} H(%d{d}, %d{(x<<4)}), H(%d{a}, %d{b<<4})"
1111 01vv vvvv 01aa aaaa u0uu uuuu usss uyyu dddd ddbb uuuu     "; V%s{v} V(%d{(y<<4)}, %d{d}), H(%d{a}, %d{b<<4})"

1111 01vv vvvv 00aa aaaa u1uu uuii iiii uxxu dddd ddbb uuuu     "; V%s{v} H(%d{d}, %d{(x<<4)}), H(%d{a}, %d{b<<4}), #%d{i}"
1111 01vv vvvv 01aa aaaa u1uu uuii iiii uyyu dddd ddbb uuuu     "; V%s{v} V(%d{(y<<4)}, %d{d}), H(%d{a}, %d{b<<4}), #%d{i}"

1111 01vv vvvv 10aa aaaa u0uu uuuu usss uxxu dddd ddbb uuuu     "; V%s{v} HX(%d{d}, %d{(x<<4)}), HX(%d{a}, %d{b<<4})"
1111 01vv vvvv 11aa aaaa u0uu uuuu usss uyyu dddd ddbb uuuu     "; V%s{v} VX(%d{(y<<4)}, %d{d}), HX(%d{a}, %d{b<<4})"

1111 01vv vvvv 10aa aaaa u1uu uuii iiii uxxu dddd ddbb uuuu     "; V%s{v} HX(%d{d}, %d{(x<<4)}), HX(%d{a}, %d{b<<4}), #%d{i}"
1111 01vv vvvv 11aa aaaa u1uu uuii iiii uyyu dddd ddbb uuuu     "; V%s{v} VX(%d{(y<<4)}, %d{d}), HX(%d{a}, %d{b<<4}), #%d{i}"


#80-bit vector insns: 1111 1xxx ...
#TODO
#OBSOLETE
#format of the first 48 bits is very similar to 48-bit (above) and can be adapted.
1111 1uuu 0uu0 dddd uuuu vvvv vvuu uuuu uxxu uuuu yyuu uuuu uuuu uuuu uuus ssuu uuuu uuuu uuuu uuuu     "; v_80_%s{v} H(%d{(y<<4)|d}, %d{(x<<4)|d}), (r%i{s})"
1111 1uuu 0uu1 dddd uuuu vvvv vvuu uuuu uxxu uuuu yyuu uuuu uuuu uuuu uuus ssuu uuuu uuuu uuuu uuuu     "; v_80_%s{v} V(%d{(y<<4)|d}, %d{(x<<4)|d}), (r%i{s})"
1111 1uuu 1uu0 dddd uuuu vvvv vvuu usss uxxu uuuu yyuu uuuu uuuu uuuu uuuu uuuu uuuu uuuu uuuu uuuu     "; v_80_%s{v} (r%i{s}), H(%d{(y<<4)|d}, %d{(x<<4)|d})"
1111 1uuu 1uu1 dddd uuuu vvvv vvuu usss uxxu uuuu yyuu uuuu uuuu uuuu uuuu uuuu uuuu uuuu uuuu uuuu     "; v_80_%s{v} (r%i{s}), V(%d{(y<<4)|d}, %d{(x<<4)|d})"

#
# The rules below catch all undefined bit sequences.
#

#1111 1xxx xxxx xxxx yyyy yyyy yyyy yyyy yyyy yyyy yyyy yyyy zzzz zzzz zzzz zzzz zzzz zzzz zzzz zzzz    "; vector80 0x%x{x}, 0x%x{y}, 0x%x{z}"
1111 0xxx xxxx xxxx yyyy yyyy yyyy yyyy yyyy yyyy yyyy yyyy       "; vector48 0x%x{x}, 0x%x{y}"
#1111 xxxx xxxx xxxx yyyy yyyy yyyy yyyy yyyy yyyy yyyy yyyy       "; vector48 0x%x{x}, 0x%x{y}"
1110 xxxx xxxx xxxx yyyy yyyy yyyy yyyy yyyy yyyy yyyy yyyy       "; scalar48 0x%x{x}, 0x%x{y}"
1xxx xxxx xxxx xxxx yyyy yyyy yyyy yyyy                           "; scalar32 0x%x{x}, 0x%x{y}"
0xxx xxxx xxxx xxxx                                               "; scalar16 0x%x{x}"
